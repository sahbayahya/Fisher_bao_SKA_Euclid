from scipy import *
from numpy import *
from scipy import linalg

#==================Plank's prior matrix  from DETF=====================================================================
Planks_prior = array([[1.99579245e+05,  -3.73667528e+04, -1.04936812e+04 ,  1.39977603e+06  ,  5.58643962e+05 , -4.64225267e+04 , -7.65181989e+04 , -2.23806234e+03],
                    [-3.73667528e+04,   1.83928663e+05,   5.16525685e+04 , -7.42050738e+06  , -3.98758357e+06 , -1.11710442e+06 ,  1.32438370e+06 , -4.51559188e+02],
                    [-1.04936812e+04,   5.16525685e+04,   1.45055577e+04 , -2.08389634e+06  , -1.11983054e+06 , -3.13715719e+05 ,  3.71925825e+05 , -1.26811078e+02],
                    [1.39977603e+06,  -7.42050738e+06 ,  -2.08389634e+06 ,  3.64943809e+08  ,  1.58599621e+08 ,  4.25932543e+07 , -5.16878541e+07 ,  3.20338905e+04],
                    [5.58643962e+05,  -3.98758357e+06 ,  -1.11983054e+06 ,  1.58599621e+08  ,  8.70535526e+07 ,  2.48738854e+07 , -2.91740427e+07 ,  1.88438127e+04],
                    [-4.64225267e+04,  -1.11710442e+06,  -3.13715719e+05 ,  4.25932543e+07  ,  2.48738854e+07 ,  7.49686718e+06 , -8.54525588e+06 ,  1.25851649e+04],
                    [-7.65181989e+04,   1.32438370e+06,   3.71925825e+05 , -5.16878541e+07  , -2.91740427e+07 , -8.54525588e+06 ,  9.88949015e+06 , -1.01838183e+04],
                    [-2.23806234e+03,  -4.51559188e+02,  -1.26811078e+02 ,  3.20338905e+04  ,  1.88438127e+04 ,  1.25851649e+04 , -1.01838183e+04 ,  1.51709659e+04]])
def get_matrix(filename):
    '''

    :param filename: The file contain the matrix
    :return: the Matrix
    '''

    f = open ( str(filename) , 'r')
    l = []
    l = array([line.split(',') for line in f])
    return l


def add_cmb_2(M, prior_fish, matrix, n):
    '''
    This function add the prior matrix to the Matrix

    :param M: convert the parameters of the prior matrix to the parameters we desire
    :param prior_fish: The prior matrix with the initial parameters
    :param matrix: The matrix we would like to add the prior matrix to it
    :param n: the nxn number of the coloumn and raws of the matrices you want to add
    :return: the inverse of Full matrix = inverse of (prior matrix + matrix)
    '''

    #print M
       #======== convert the parameters ============
    MT = M.T
    #print MT
    M11 = dot(M, prior_fish)
    #print M11
    Final_prior_Fisher = dot(M11 , MT)
    #print 'final prior matrix ', Final_prior_Fisher

    #===== Stack new columns and raws===========
    newraw = linspace(0.,0.,n)
    matrix = vstack((matrix,newraw))
    #print 'matrix', matrix
    #matrix = vstack((newraw, matrix))
    newcolumn = linspace(0., 0., n+1)
    #matrix= column_stack((newcolumn, matrix))
    matrix = column_stack(( matrix, newcolumn))
    #print 'matrix after adding columns ', matrix
    matrix_plus_prior = matrix +  Final_prior_Fisher
    #print 'matrix + final prior ',  matrix_plus_prior
    matrix_plus_prior =  linalg.inv(matrix_plus_prior)
    #print matrix_plus_prior
    return matrix_plus_prior

def delete_param(M, prior_fish, matrix, n,m):
    '''
    :param M: convert the parameters of the prior matrix to the parameters we desire
    :param prior_fish: The prior matrix with the initial parameters
    :param matrix: The matrix we would like to add the prior matrix to it
    :param n : length of the matrix
    :param m: number of the coloumn and raw you want to remove
    :return: the new fisher matrix
    '''
    #======== convert the parameters ============
    MT = M.T
    #print MT
    M11 = dot(M, prior_fish)
    #Delete the specified raw

    Final_prior_Fisher = dot(M11 , MT)
    #print 'final prior matrix ', Final_prior_Fisher
    Final_prior_Fisher = delete(Final_prior_Fisher,(m), axis=1)
    Final_prior_Fisher = delete(Final_prior_Fisher,(m), axis=0)
    #===== Stack new columns and raws===========
    newraw = linspace(0.,0.,n)
    matrix = vstack((matrix,newraw))
    #print 'matrix', matrix
    #matrix = vstack((newraw, matrix))
    newcolumn = linspace(0., 0., n+1)
    #matrix= column_stack((newcolumn, matrix))
    matrix = column_stack((matrix, newcolumn))
    #print 'matrix after adding columns ', matrix
    matrix = delete(matrix,(m+1), axis=1)
    matrix=  delete(matrix,(m+1), axis=0)
    matrix_plus_prior = matrix +  Final_prior_Fisher
    matrix_plus_prior =  linalg.inv(matrix_plus_prior)
    return matrix_plus_prior




def FoM(matrix_plus_prior):
    '''
    :param matrix_plus_prior: The fisher matrix that you would like
    find FoM of w and w0 for it,
    :return:FoM
    '''
    #============parameters========================
    w0 = sqrt(matrix_plus_prior[1,1])#/1e-1 #;   print 'sigma_w0 = ', w0
    wa = sqrt(matrix_plus_prior[2,2])   # ; print 'sigma_wa =', wa
    w0a = (matrix_plus_prior[2,1])  #;  print 'sigma w0a = ', w0a
    wa0 =((matrix_plus_prior[1,2]))   #; print' wa0 = ', wa0
    ob0 =sqrt(matrix_plus_prior[3,3])*0.049 #/1e-4   #print'sigma_ob0 =', ob0
    ok0 = sqrt((matrix_plus_prior[4,4])) #/1e-2  #print 'sigma_ok0=', ok0
    om0 = sqrt(matrix_plus_prior[5,5])#/1e-2  #print 'sigma_om0 = ', om0
    h = sqrt(matrix_plus_prior[6,6])#/1e-2    #print 'sigma_h = ',  h
    FoM2 =  1.0/sqrt(matrix_plus_prior[1,1] * matrix_plus_prior[2,2]
                     - matrix_plus_prior[1,2]* matrix_plus_prior[2,1])#/(pi*(sqrt(2.31)))
	

    #print 'w_ok =', matrix_plus_prior[1,4]
    print 'w0_Ok = ' , matrix_plus_prior[1,4], 'Okw0 =', matrix_plus_prior[4,1]
    print 'wa0 = ', matrix_plus_prior[1,2], 'w0a =', matrix_plus_prior[2,1]
    print  '&','%.4f' % w0,  '&', '%.4f' % wa,  '&','%.5f' % om0,  '&', '%.7f' % ob0,  '&', '%.7f' % ok0,  '&',  '%.5f'  % h,  '&', '%.0f' % FoM2 , ' \\\ '
    return FoM2




#============================Main progarm ===========================================================================
if __name__== "__main__" :
    ''' using the planck prior from DETF (From File, file:planck_prior.dat), we transform the parameters:
     {n_s, w0, wa, omega_b, omegak, omegaDE, h, sigma8} to our parameters {n_s, w0, wa, omega_b, omegak, omega_cdm, h, sigma8}
	'''
    ob = 0.049
    M = array([[1., 0 , 0., 0., 0.,  0.,  0.,  0.],
               [0., 1., 0., 0., 0.,  0.,  0.,  0.],
               [0., 0., 1., 0., 0.,  0.,  0.,  0.],
               [0., 0., 0., ob,-ob, -ob,  0.,  0.],
               [0., 0., 0., 0., 1.,  0.,  0.,  0.],
               [0., 0., 0.,-ob,-1., -1.,  0.,  0.],
               [0., 0., 0., 0., 0., 0. ,  1.,  0.],
               [0., 0., 0., 0., 0., 0. ,  0.,  1.]])
    #test = get_matrix('planck_prior.txt')
   # print test
    planck_prior= mat('[0.172276e6  0.490320e5  0.674392e6  -0.208974e7  0.325219e7  -0.790504e7  -0.549427e5 ;  0.490320e5 0.139551e5 0.191940e6  -0.594767e6 0.925615e6 -0.224987e7  -0.156374e5 ; 0.674392e6  0.191940e6 0.263997e7  -0.818048e7 0.127310e8  -0.309450e8  -0.215078e6 ;  -0.208974e7  -0.594767e6  -0.818048e7 0.253489e8  -0.394501e8  0.958892e8 0.666335e6 ;  0.325219e7  0.925615e6  0.127310e8 -0.394501e8  0.633564e8  -0.147973e9 -0.501247e6 ;  -0.790504e7 -0.224987e7  -0.309450e8  0.958892e8 -0.147973e9 0.405079e9 0.219009e7 ;  -0.549427e5  -0.156374e5 -0.215078e6 0.666335e6  -0.501247e6  0.219009e7 0.242767e6]')
    _ska_0uJy = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       407875.16896861326        92778.803051812371        86354.765988967862        577625.79335867916        1762342.2091307989        3235595.3175015124      ;   0.0000000       92778.803051812371        22019.380027356950        20830.655424195807        138100.82844866463        425115.42793839116        738068.02617286774      ;   0.0000000       86354.765988967862        20830.655424195807        19947.869113165547        131119.69915708376        407099.38030333357        692535.95895094716      ;   0.0000000       577625.79335867916        138100.82844866463        131119.69915708376        904303.97270202683        2675912.2976788781        4598181.4556794763      ;   0.0000000       1762342.2091307989        425115.42793839116        407099.38030333357        2675912.2976788781        8308150.8357189335        14133387.286997573      ;   0.0000000       3235595.3175015124        738068.02617286774        692535.95895094716        4598181.4556794763        14133387.286997573        25888828.440792106]')
    _ska_3uJy = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       243041.09687099993        52767.516895608263        47435.719126555479        352970.19726335467        968075.92586009484        1891366.8973636508      ;   0.0000000       52767.516895608263        12040.689053429185        10975.118744192798        80497.940947727300        223982.02104542300        409051.23276056873      ;   0.0000000       47435.719126555479        10975.118744192798        10107.428570498318        73427.278133316999        206274.05785384684        370195.09153915342      ;   0.0000000       352970.19726335467        80497.940947727300        73427.278133316999        553207.82117047545        1498515.9194625504        2736810.9663265976      ;   0.0000000       968075.92586009484        223982.02104542300        206274.05785384684        1498515.9194625504        4209674.7601743769        7555002.0657323999      ;   0.0000000       1891366.8973636508        409051.23276056873        370195.09153915342        2736810.9663265976        7555002.0657323999        14873671.863576580]')
    _ska_5uJy = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       156583.92201677372        32032.016959630761        27819.944825834489        226124.19050781472        567753.99088594178        1201966.9222480070      ;   0.0000000       32032.016959630761        6906.7868677315309        6044.7636130055644        48406.957951110104        123362.52594070662        242659.12468054731      ;   0.0000000       27819.944825834489        6044.7636130055644        5323.1782290577594        42347.749278408570        108636.29323010522        211761.85687015735      ;   0.0000000       226124.19050781472        48406.957951110104        42347.749278408570        345535.69502014155        864239.80379452603        1716156.2562818793      ;   0.0000000       567753.99088594178        123362.52594070662        108636.29323010522        864239.80379452603        2217067.2667607469        4321670.6613954622      ;   0.0000000       1201966.9222480070        242659.12468054731        211761.85687015735        1716156.2562818793        4321670.6613954632        9351038.1084904876]')
    _ska_23uJy = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       34420.646599249427        5633.6818703381959        4736.0018930921442        46464.927344168223        96653.102386797604        273516.98044591973      ;   0.0000000       5633.6818703381959        976.25412079569173        810.74066467580690        7862.1752931548681        16545.728283248067        43040.495740130187      ;   0.0000000       4736.0018930921442        810.74066467580690        675.93640517613903        6562.7026915315128        13794.620874570275        36622.975214566184      ;   0.0000000       46464.927344168223        7862.1752931548681        6562.7026915315128        64244.123973731403        133932.71149318901        360799.08641866891      ;   0.0000000       96653.102386797604        16545.728283248067        13794.620874570275        133932.71149318901        281522.88235391461        747407.67698712286      ;   0.0000000       273516.98044591973        43040.495740130187        36622.975214566184        360799.08641866891        747407.67698712286        2251234.2920861468]')
    _ska_70uJy = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       1613.0256572841599        197.73647503928302        180.25695159667174        1975.1119841577404        3678.7133941008665        14942.564128445974      ;   0.0000000       197.73647503928302        25.288782561735218        22.557691651307202        246.33307044190624        460.36106614816003        1745.5561371360905      ;   0.0000000       180.25695159667174        22.557691651307202        20.347581490920209        222.56757232244786        415.25677598105528        1633.3131357707966      ;   0.0000000       1975.1119841577404        246.33307044190624        222.56757232244786        2439.4279407986619        4542.1954723116478        17945.079167118805      ;   0.0000000       3678.7133941008665        460.36106614816003        415.25677598105528        4542.1954723116478        8474.6283028834750        33332.922009937378      ;   0.0000000       14942.564128445974        1745.5561371360905        1633.3131357707966        17945.079167118805        33332.922009937378        147128.17551130749]')
    _ska_150uJy = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       858.70114762621677        100.59854341967851        93.805049373960188        1047.6124058104251        1914.3888128010035        8237.0361244580017      ;   0.0000000       100.59854341967851        12.436281375149720        11.269412649187904        125.13255224907626        229.98801926362285        907.42288832978306      ;   0.0000000       93.805049373960188        11.269412649187904        10.368868184109184        115.47483935536181        211.60956031197563        876.10081715328533      ;   0.0000000       1047.6124058104251        125.13255224907626        115.47483935536181        1288.6890762148944        2356.6294362322878        9833.4843614576657      ;   0.0000000       1914.3888128010035        229.98801926362285        211.60956031197563        2356.6294362322878        4318.5625682900609        17879.608980938810      ;   0.0000000       8237.0361244580017        907.42288832978306        876.10081715328533        9833.4843614576657        17879.608980938810        85507.029945342700]')
    _ska_200uJy = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       496.45230300139877        54.683541078665186        52.682595579687636        598.40979444450625        1075.1550399489527        5008.3981102009629      ;   0.0000000       54.683541078665186        6.4177047541965626        5.9677973660423582        67.286727401383743        121.79178616568399        513.11450216447179      ;   0.0000000       52.682595579687636        5.9677973660423582        5.6602606826475563        64.076061895612412        115.51552715674876        516.12362148325360      ;   0.0000000       598.40979444450625        67.286727401383743        64.076061895612412        726.89699482210290        1307.6747667632130        5900.9260617910295      ;   0.0000000       1075.1550399489527        121.79178616568399        115.51552715674876        1307.6747667632130        2357.4597995476156        10533.135407785003      ;   0.0000000       5008.3981102009629        513.11450216447179        516.12362148325360        5900.9260617910295        10533.135407785003        55484.242319764358]')
    _euclid = mat('[0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000     ;   0.0000000       27112.012031620732        6426.2357809760297        6036.5328226803595        40516.447687534797        123194.55062355423        214201.06306483154      ;   0.0000000       6426.2357809760297        1577.6066631568785        1509.1165463329328        10110.306335626652        30798.297669407082        51181.845318732332      ;   0.0000000       6036.5328226803595        1509.1165463329328        1465.6024328917933        9724.9473457614458        29910.254514730215        48581.197035777230      ;   0.0000000       40516.447687534797        10110.306335626652        9724.9473457614458        67068.970294243496        198468.31836935855        322733.11908473365      ;   0.0000000       123194.55062355423        30798.297669407082        29910.254514730215        198468.31836935855        610413.37340765027        991453.02665967634      ;   0.0000000       214201.06306483154        51181.845318732332        48581.197035777230        322733.11908473365        991453.02665967634        1705971.6533361569]')


    print '-------0uJy (30000)-----------'
    ska_0uJy = add_cmb_2(M, Planks_prior, _ska_0uJy, 7)
    _ska_0uJy_wa_off = delete_param(M, Planks_prior, _ska_0uJy, 7, 1)
    ska_0uJy= FoM(ska_0uJy)
    print '------3 uJy ------------------------'
    ska_3uJy =add_cmb_2(M, Planks_prior,_ska_3uJy, 7)
    _ska_3uJy_wa_off = delete_param(M, Planks_prior, _ska_3uJy, 7, 1)
    ska_3uJy = FoM(ska_3uJy)
    print '------ 5uJy ------------------------'
    ska_5uJy = add_cmb_2(M, Planks_prior, _ska_5uJy, 7)
    ska_5uJy = FoM(ska_5uJy)
    print '------23uJy----------------------- '
    ska_23uJy = add_cmb_2(M, Planks_prior,_ska_23uJy, 7)
    ska_23uJy = FoM(ska_23uJy)
    print '-------Euclid -----------------------'
    euclid = add_cmb_2(M, Planks_prior, _euclid, 7)
    Euclid = FoM(euclid)
    print '------70uJy------------------------'
    ska_70uJy = add_cmb_2(M, Planks_prior, _ska_70uJy, 7)
    ska_70uJy = FoM(ska_70uJy)
    print '----- 150 uJy --------------------- '
    ska_150uJy = add_cmb_2(M, Planks_prior, _ska_150uJy,7)
    ska_150uJy = FoM(ska_150uJy)
    print '----- 200 uJy ---------------------'
    ska_200uJy = add_cmb_2(M, Planks_prior,_ska_200uJy, 7)
    ska_200uJy = FoM(ska_200uJy)

